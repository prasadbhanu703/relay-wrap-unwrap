{"version":3,"sources":["../../../src/providers/provider.test.ts"],"names":["CONTRACT_ADDRESS","EIP1193Provider","EthersProvider","HttpProvider","send","call","Web3Provider","jest","mock","isProvider","fn","mockImplementation","describe","it","mockImplementationOnce","to","data","expect","toHaveBeenCalledTimes","rejects","toThrow"],"mappings":"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","sourcesContent":["import { CONTRACT_ADDRESS } from '../constants';\nimport EIP1193Provider from './eip-1193';\nimport EthersProvider from './ethers';\nimport HttpProvider from './http';\nimport { send, call } from './provider';\nimport Web3Provider from './web3';\n\njest.mock('./eip-1193', () => ({\n  isProvider: jest.fn(),\n  send: jest.fn().mockImplementation(async () => '0x00')\n}));\n\njest.mock('./ethers', () => ({\n  isProvider: jest.fn(),\n  send: jest.fn().mockImplementation(async () => '0x00')\n}));\n\njest.mock('./http', () => ({\n  isProvider: jest.fn(),\n  send: jest.fn().mockImplementation(async () => '0x00')\n}));\n\njest.mock('./web3', () => ({\n  isProvider: jest.fn(),\n  send: jest.fn().mockImplementation(async () => '0x00')\n}));\n\ndescribe('send', () => {\n  it('calls the correct provider', async () => {\n    (EIP1193Provider.isProvider as jest.MockedFunction<typeof EIP1193Provider.isProvider>).mockImplementationOnce(\n      () => true\n    );\n    await send('foo', 'eth_call', [{ to: CONTRACT_ADDRESS, data: '0x' }]);\n\n    (EthersProvider.isProvider as jest.MockedFunction<typeof EthersProvider.isProvider>).mockImplementationOnce(\n      () => true\n    );\n    await send('foo', 'eth_call', [{ to: CONTRACT_ADDRESS, data: '0x' }]);\n\n    (HttpProvider.isProvider as jest.MockedFunction<typeof HttpProvider.isProvider>).mockImplementationOnce(() => true);\n    await send('foo', 'eth_call', [{ to: CONTRACT_ADDRESS, data: '0x' }]);\n\n    (Web3Provider.isProvider as jest.MockedFunction<typeof Web3Provider.isProvider>).mockImplementationOnce(() => true);\n    await send('foo', 'eth_call', [{ to: CONTRACT_ADDRESS, data: '0x' }]);\n\n    expect(EIP1193Provider.send).toHaveBeenCalledTimes(1);\n    expect(EthersProvider.send).toHaveBeenCalledTimes(1);\n    expect(HttpProvider.send).toHaveBeenCalledTimes(1);\n    expect(Web3Provider.send).toHaveBeenCalledTimes(1);\n  });\n\n  it('throws for invalid providers', async () => {\n    // @ts-expect-error Invalid provider type\n    await expect(() => send({}, CONTRACT_ADDRESS, '0x')).rejects.toThrow('Invalid provider type');\n  });\n});\n\ndescribe('call', () => {\n  it('throws if a call reverts', async () => {\n    (EthersProvider.isProvider as jest.MockedFunction<typeof EthersProvider.isProvider>).mockImplementationOnce(\n      () => true\n    );\n    (EthersProvider.send as jest.MockedFunction<typeof EthersProvider.send>).mockImplementationOnce(\n      async () => '08c379a'\n    );\n\n    await expect(call('foo', CONTRACT_ADDRESS, '0x')).rejects.toThrow();\n  });\n});\n"],"file":"provider.test.js"}