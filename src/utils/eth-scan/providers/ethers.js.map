{"version":3,"sources":["../../../src/providers/ethers.ts"],"names":["provider","isProvider","send","method","params"],"mappings":"AAMA;;GAGA,KAAMA,CAAAA,QAAsC,CAAG,CAC7CC,UAAU,CAAGD,CAAD,EACH,iBAACA,CAAD,WAACA,CAAD,QAACA,CAAD,CAAkCE,IAAlC,CAFoC,CAK7CA,IAAI,CAASF,CAAT,CAAuCG,CAAvC,CAAuDC,CAAvD,CAA2F,CAC7F,MAAOJ,CAAAA,CAAQ,CAACE,IAAT,CAAcC,CAAd,CAAsBC,CAAtB,CACR,CAP4C,CAA/C,CAUA,cAAeJ,CAAAA,QAAf","sourcesContent":["import type { Provider } from '../types';\n\nexport interface EthersProviderLike {\n  send<Result>(method: string, params: unknown[] | unknown): Promise<Result>;\n}\n\n/**\n * Ethers.js provider, which can be used with an instance of the Ethers.js Provider class.\n */\nconst provider: Provider<EthersProviderLike> = {\n  isProvider: (provider: unknown): provider is EthersProviderLike => {\n    return (provider as EthersProviderLike)?.send !== undefined;\n  },\n\n  send<Result>(provider: EthersProviderLike, method: string, params: unknown[]): Promise<Result> {\n    return provider.send(method, params);\n  }\n};\n\nexport default provider;\n"],"file":"ethers.js"}