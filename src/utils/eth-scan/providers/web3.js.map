{"version":3,"sources":["../../../src/providers/web3.ts"],"names":["getPayload","provider","isProvider","currentProvider","send","method","params","payload","Promise","resolve","reject","error","result","Error"],"mappings":"AACA,OAASA,UAAT,KAA2B,QAA3B,CAQA;;GAGA,KAAMC,CAAAA,QAAoC,CAAG,CAC3CC,UAAU,CAAGD,CAAD,EAAqD,OAC/D,MAAO,QAACA,CAAD,WAACA,CAAD,YAACA,CAAD,CAAgCE,eAAhC,uBAAiDC,IAAjD,UACR,CAH0C,CAK3CA,IAAI,CAAE,CAAIH,CAAJ,CAAgCI,CAAhC,CAAgDC,CAAhD,GAAkF,CACtF,KAAMC,CAAAA,CAAO,CAAGP,UAAU,CAACK,CAAD,CAASC,CAAT,CAA1B,CAEA,MAAO,IAAIE,CAAAA,OAAJ,CAAY,CAACC,CAAD,CAAUC,CAAV,GAAqB,CACtCT,CAAQ,CAACE,eAAT,CAAyBC,IAAzB,CAAiCG,CAAjC,CAA0C,CAACI,CAAD,CAAQC,CAAR,GACpCD,CADoC,CAE/BD,CAAM,CAACC,CAAD,CAFyB,CAKnCC,CALmC,KASxCH,CAAAA,CAAO,CAACG,CAAM,CAACA,MAAR,CATiC,CAM/BF,CAAM,CAAC,GAAIG,CAAAA,KAAJ,CAAU,qBAAV,CAAD,CANjB,CAWD,CAZM,CAaR,CArB0C,CAA7C,CAwBA,cAAeZ,CAAAA,QAAf","sourcesContent":["import type { JsonRpcPayload, JsonRpcResult, Provider } from '../types';\nimport { getPayload } from './http';\n\nexport interface Web3ProviderLike {\n  currentProvider: {\n    send<T>(payload: JsonRpcPayload, callback: (error: Error | null, result?: JsonRpcResult<T>) => void): void;\n  };\n}\n\n/**\n * Web3 provider, which can be used with an instance of the Web3 class.\n */\nconst provider: Provider<Web3ProviderLike> = {\n  isProvider: (provider: unknown): provider is Web3ProviderLike => {\n    return (provider as Web3ProviderLike)?.currentProvider?.send !== undefined;\n  },\n\n  send: <T>(provider: Web3ProviderLike, method: string, params: unknown[]): Promise<T> => {\n    const payload = getPayload(method, params);\n\n    return new Promise((resolve, reject) => {\n      provider.currentProvider.send<T>(payload, (error, result) => {\n        if (error) {\n          return reject(error);\n        }\n\n        if (!result) {\n          return reject(new Error('No response payload'));\n        }\n\n        resolve(result.result);\n      });\n    });\n  }\n};\n\nexport default provider;\n"],"file":"web3.js"}