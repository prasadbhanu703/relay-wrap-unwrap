{"version":3,"sources":["../../../src/providers/provider.ts"],"names":["fromHex","stripPrefix","EIP1193Provider","EthersProvider","HttpProvider","Web3Provider","providers","getProvider","providerLike","provider","find","type","isProvider","Error","call","contractAddress","data","result","send","to","startsWith","error","stack","toString","method","params"],"mappings":"AAAA,OAASA,OAAT,CAAkBC,WAAlB,KAAqC,cAArC,CAEA,MAAOC,CAAAA,eAAP,KAA4B,YAA5B,CACA,MAAOC,CAAAA,cAAP,KAA2B,UAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,QAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,QAAzB,CAEA,KAAMC,CAAAA,SAAS,CAAG,CAACJ,eAAD,CAAkBC,cAAlB,CAAkCC,YAAlC,CAAgDC,YAAhD,CAAlB,CAIA,MAAO,MAAME,CAAAA,WAAW,CAAIC,CAAD,EAAmD,CAC5E,KAAMC,CAAAA,CAAQ,CAAGH,SAAS,CAACI,IAAV,CAAgBC,CAAD,EAAUA,CAAI,CAACC,UAAL,CAAgBJ,CAAhB,CAAzB,CAAjB,CACA,GAAI,CAACC,CAAL,CACE,KAAM,IAAII,CAAAA,KAAJ,CAAU,uBAAV,CAAN,CAGF,MAAOJ,CAAAA,CACR,CAPM,CASP;;;;;;;;GASA,MAAO,MAAMK,CAAAA,IAAI,CAAG,MAAON,CAAP,CAAmCO,CAAnC,CAA4DC,CAA5D,GAAkG,CACpH,GAAI,CACF,KAAMC,CAAAA,CAAM,CAAG,KAAMC,CAAAA,IAAI,CAASV,CAAT,CAAuB,UAAvB,CAAmC,CAAC,CAAEW,EAAE,CAAEJ,CAAN,CAAuBC,IAAI,CAAJA,CAAvB,CAAD,CAAgC,QAAhC,CAAnC,CAAzB,CACA,GAAIf,WAAW,CAACgB,CAAD,CAAX,CAAoBG,UAApB,CAA+B,SAA/B,CAAJ,CACE,KAAM,IAAIP,CAAAA,KAAJ,CAAU,eAAV,CAAN,CAGF,MAAOb,CAAAA,OAAO,CAACiB,CAAD,CACf,CAAC,MAAOI,CAAP,CAAc,OACd,KAAM,IAAIR,CAAAA,KAAJ,CAAW,qCAAD,UAAqCQ,CAAK,CAACC,KAA3C,gBAAoDD,CAAK,CAACE,QAAN,EAAiB,EAA/E,CACP,CACF,CAXM,CAaP,MAAO,MAAML,CAAAA,IAAI,CAAG,MAAeV,CAAf,CAA2CgB,CAA3C,CAA2DC,CAA3D,GAAkG,CACpH,KAAMhB,CAAAA,CAAQ,CAAGF,WAAW,CAACC,CAAD,CAA5B,CACA,MAAOC,CAAAA,CAAQ,CAACS,IAAT,CAAcV,CAAd,CAA4BgB,CAA5B,CAAoCC,CAApC,CACR,CAHM","sourcesContent":["import { fromHex, stripPrefix } from '@findeth/abi';\nimport type { Provider, ProviderType } from '../types';\nimport EIP1193Provider from './eip-1193';\nimport EthersProvider from './ethers';\nimport HttpProvider from './http';\nimport Web3Provider from './web3';\n\nconst providers = [EIP1193Provider, EthersProvider, HttpProvider, Web3Provider] as const;\n\nexport type ProviderLike = ProviderType<typeof providers>;\n\nexport const getProvider = (providerLike: ProviderLike): Provider<unknown> => {\n  const provider = providers.find((type) => type.isProvider(providerLike));\n  if (!provider) {\n    throw new Error('Invalid provider type');\n  }\n\n  return provider;\n};\n\n/**\n * Send a call with the data, using the specified provider. If the provider is not a valid provider type (e.g. not a\n * Ethers.js provider, URL or Web3 provider), this will throw an error.\n *\n * @param {ProviderLike} providerLike\n * @param {string} contractAddress\n * @param {string} data\n * @return {Promise<Uint8Array>}\n */\nexport const call = async (providerLike: ProviderLike, contractAddress: string, data: string): Promise<Uint8Array> => {\n  try {\n    const result = await send<string>(providerLike, 'eth_call', [{ to: contractAddress, data }, 'latest']);\n    if (stripPrefix(result).startsWith('08c379a')) {\n      throw new Error('Call reverted');\n    }\n\n    return fromHex(result);\n  } catch (error) {\n    throw new Error(`Failed to get data from contract: ${error.stack ?? error.toString()}`);\n  }\n};\n\nexport const send = async <Result>(providerLike: ProviderLike, method: string, params: unknown[]): Promise<Result> => {\n  const provider = getProvider(providerLike);\n  return provider.send(providerLike, method, params);\n};\n"],"file":"provider.js"}