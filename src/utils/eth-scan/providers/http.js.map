{"version":3,"sources":["../../../src/providers/http.ts"],"names":["fetch","uuid","provider","isProvider","url","send","method","params","options","payload","getPayload","response","headers","Accept","body","JSON","stringify","cache","ok","Error","status","statusText","error","result","json","message","jsonrpc","id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CAWA;;GAGA,KAAMC,CAAAA,QAAoC,CAAG,CAC3CC,UAAU,CAAGD,CAAD,EAEY,QAApB,QAAOA,CAAAA,CAAP,EACqB,QAApB,QAAOA,CAAAA,CAAP,EAAgC,SAACA,CAAD,CAAkCE,GAJ5B,CAQ3CC,IAAI,CAAE,MAAeH,CAAf,CAA2CI,CAA3C,CAA2DC,CAA3D,GAAkG,MAChGH,CAAAA,CAAG,CAAuB,QAApB,QAAOF,CAAAA,CAAP,CAA+BA,CAA/B,CAA0CA,CAAQ,CAACE,GADuC,CAEhGI,CAAO,CAAuB,QAApB,QAAON,CAAAA,CAAP,CAA+BA,CAAQ,CAACK,MAAxC,CAAiD,EAFqC,CAGhGE,CAAO,CAAGC,UAAU,CAACJ,CAAD,CAASC,CAAT,CAH4E,CAKhGI,CAAQ,CAAG,KAAMX,CAAAA,KAAK,CAACI,CAAD,CAAM,CAChCE,MAAM,CAAE,MADwB,CAEhCM,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAEP,eAAgB,kBAFT,CAFuB,CAMhCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeP,CAAf,CAN0B,CAOhCQ,KAAK,CAAE,UAPyB,CAQhC,GAAGT,CAR6B,CAAN,CAL0E,CAgBtG,GAAI,CAACG,CAAQ,CAACO,EAAd,CACE,KAAM,IAAIC,CAAAA,KAAJ,CAAW,kCAAiCR,CAAQ,CAACS,MAAO,KAAIT,CAAQ,CAACU,UAAW,EAApF,CAAN,CAGF,KAAM,CAAEC,KAAK,CAALA,CAAF,CAASC,MAAM,CAANA,CAAT,EAA2C,KAAMZ,CAAAA,CAAQ,CAACa,IAAT,EAAvD,CACA,GAAIF,CAAJ,CACE,KAAM,IAAIH,CAAAA,KAAJ,CAAW,mBAAkBG,CAAK,CAACG,OAAQ,EAA3C,CAAN,CAGF,MAAOF,CAAAA,CACR,CAlC0C,CAA7C,CAqCA,cAAerB,CAAAA,QAAf,CAEA;;GAGA,MAAO,MAAMQ,CAAAA,UAAU,CAAG,CAACJ,CAAD,CAAiBC,CAAjB,IAAwD,CAChFmB,OAAO,CAAE,KADuE,CAEhFpB,MAAM,CAANA,CAFgF,CAGhFC,MAAM,CAANA,CAHgF,CAIhFoB,EAAE,CAAE1B,IAAI,EAJwE,CAAxD,CAAnB","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport uuid from 'uuid-random-es';\nimport type { JsonRpcResult, Provider } from '../types';\nimport { JsonRpcPayload } from '../types';\n\ninterface HttpProviderOptions {\n  url: string;\n  params?: Partial<Omit<RequestInit, 'body' | 'method' | 'headers'>>;\n}\n\nexport type HttpProviderLike = string | HttpProviderOptions;\n\n/**\n * A raw HTTP provider, which can be used with an Ethereum node endpoint (JSON-RPC), or an `HttpProviderOptions` object.\n */\nconst provider: Provider<HttpProviderLike> = {\n  isProvider: (provider: unknown): provider is HttpProviderLike => {\n    return (\n      typeof provider === 'string' ||\n      (typeof provider === 'object' && (provider as HttpProviderOptions).url !== undefined)\n    );\n  },\n\n  send: async <Result>(provider: HttpProviderLike, method: string, params: unknown[]): Promise<Result> => {\n    const url = typeof provider === 'string' ? provider : provider.url;\n    const options = typeof provider === 'object' ? provider.params : {};\n    const payload = getPayload(method, params);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload),\n      cache: 'no-cache',\n      ...options\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with HTTP error ${response.status}: ${response.statusText}`);\n    }\n\n    const { error, result }: JsonRpcResult<Result> = await response.json();\n    if (error) {\n      throw new Error(`Request failed: ${error.message}`);\n    }\n\n    return result;\n  }\n};\n\nexport default provider;\n\n/**\n * Get the JSON-RPC payload for the `eth_call` function.\n */\nexport const getPayload = (method: string, params: unknown[]): JsonRpcPayload => ({\n  jsonrpc: '2.0',\n  method,\n  params,\n  id: uuid()\n});\n"],"file":"http.js"}