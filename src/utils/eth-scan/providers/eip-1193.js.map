{"version":3,"sources":["../../../src/providers/eip-1193.ts"],"names":["getPayload","provider","isProvider","request","send","method","params","payload"],"mappings":"AACA,OAASA,UAAT,KAA2B,QAA3B,CAMA;;GAGA,KAAMC,CAAAA,QAAuC,CAAG,CAC9CC,UAAU,CAAGD,CAAD,EACH,iBAACA,CAAD,WAACA,CAAD,QAACA,CAAD,CAAmCE,OAAnC,CAFqC,CAK9CC,IAAI,CAAE,MAAeH,CAAf,CAA8CI,CAA9C,CAA8DC,CAA9D,GAAqG,CACzG,KAAMC,CAAAA,CAAO,CAAGP,UAAU,CAACK,CAAD,CAASC,CAAT,CAA1B,CACA,MAAOL,CAAAA,CAAQ,CAACE,OAAT,CAAiBI,CAAjB,CACR,CAR6C,CAAhD,CAWA,cAAeN,CAAAA,QAAf","sourcesContent":["import type { JsonRpcPayload, Provider } from '../types';\nimport { getPayload } from './http';\n\nexport interface EIP1193ProviderLike {\n  request<Result>(transaction: JsonRpcPayload): Promise<Result>;\n}\n\n/**\n * EIP-1193 provider, which can be used with the `window.ethereum` object.\n */\nconst provider: Provider<EIP1193ProviderLike> = {\n  isProvider: (provider: unknown): provider is EIP1193ProviderLike => {\n    return (provider as EIP1193ProviderLike)?.request !== undefined;\n  },\n\n  send: async <Result>(provider: EIP1193ProviderLike, method: string, params: unknown[]): Promise<Result> => {\n    const payload = getPayload(method, params);\n    return provider.request(payload);\n  }\n};\n\nexport default provider;\n"],"file":"eip-1193.js"}