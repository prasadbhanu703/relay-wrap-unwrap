{"version":3,"sources":["../../../src/providers/web3.test.ts"],"names":["decode","encode","fromHex","toHex","ethers","network","waffle","JsonRpcServer","Web3","ETHER_BALANCES_ID","ETHER_BALANCES_TYPE","TOKEN_BALANCES_ID","TOKEN_BALANCES_TYPE","fixture","withId","Web3Provider","createFixtureLoader","provider","isProvider","send","loadFixture","getWallets","server","hostname","port","beforeAll","listen","afterAll","close","web3","describe","it","expect","toBe","contract","addresses","data","response","to","address","results","i","length","balance","getBalance","success","value","toHexString","slice","padStart","token","mock","balanceOf","returns"],"mappings":"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","sourcesContent":["import { decode, encode, fromHex, toHex } from '@findeth/abi';\nimport { ethers, network, waffle } from 'hardhat';\nimport { JsonRpcServer } from 'hardhat/internal/hardhat-network/jsonrpc/server';\nimport Web3 from 'web3';\nimport { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { fixture } from '../eth-scan.test';\nimport { Result } from '../types';\nimport { withId } from '../utils';\nimport Web3Provider, { Web3ProviderLike } from './web3';\n\nconst { createFixtureLoader, provider } = waffle;\nconst { isProvider, send } = Web3Provider;\n\nconst loadFixture = createFixtureLoader(provider.getWallets(), provider);\n\nconst server = new JsonRpcServer({\n  hostname: '127.0.0.1',\n  port: 8548,\n  provider: network.provider\n});\n\nbeforeAll(async () => {\n  await server.listen();\n}, 100000);\n\nafterAll(async () => {\n  await server.close();\n});\n\nconst web3 = new Web3('http://127.0.0.1:8548');\n\ndescribe('isProvider', () => {\n  it('checks if a provider is a Web3 provider', () => {\n    expect(isProvider(web3)).toBe(true);\n    expect(isProvider({})).toBe(false);\n  });\n});\n\ndescribe('send', () => {\n  it('gets the Ether balances from the contract', async () => {\n    const { contract, addresses } = await loadFixture(fixture);\n\n    const data = withId(ETHER_BALANCES_ID, encode(ETHER_BALANCES_TYPE, [addresses]));\n    const response = await send<string>((web3 as unknown) as Web3ProviderLike, 'eth_call', [\n      { to: contract.address, data }\n    ]);\n\n    const results = decode(['(bool,bytes)[]'], fromHex(response))[0] as Result[];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const balance = await ethers.provider.getBalance(addresses[i]);\n      const [success, value] = results[i];\n\n      expect(success).toBe(true);\n      expect(toHex(value)).toBe(balance.toHexString().slice(2).padStart(64, '0'));\n    }\n  });\n\n  it('gets the token balances from the contract', async () => {\n    const { contract, addresses, token } = await loadFixture(fixture);\n    await token.mock.balanceOf.returns('1000');\n\n    const data = withId(TOKEN_BALANCES_ID, encode(TOKEN_BALANCES_TYPE, [addresses, token.address]));\n    const response = await send<string>((web3 as unknown) as Web3ProviderLike, 'eth_call', [\n      { to: contract.address, data }\n    ]);\n\n    const results = decode(['(bool,bytes)[]'], fromHex(response))[0] as Result[];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const [success, value] = results[i];\n\n      expect(success).toBe(true);\n      expect(toHex(value)).toBe('00000000000000000000000000000000000000000000000000000000000003e8');\n    }\n  });\n});\n"],"file":"web3.test.js"}