{"version":3,"sources":["../../src/eth-scan.test.ts"],"names":["ERC20Artifact","waffle","ethers","BalanceScannerArtifact","ERC20InvalidMockArtifact","getEtherBalances","getTokenBalances","getTokensBalance","getTokensBalances","deployContract","deployMockContract","createFixtureLoader","provider","loadFixture","getWallets","fixture","signers","signer","contract","token","abi","tokenA","mock","balanceOf","returns","tokenB","addresses","Promise","all","slice","map","s","getAddress","invalidToken","describe","it","balances","contractAddress","address","balance","BigInt","getBalance","toHexString","expect","toBe","not","toThrow","Object","keys","toHaveLength"],"mappings":"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","sourcesContent":["import ERC20Artifact from '@openzeppelin/contracts/build/contracts/IERC20.json';\nimport { MockContract, MockProvider } from 'ethereum-waffle';\nimport { Signer } from 'ethers';\nimport { waffle, ethers } from 'hardhat';\nimport BalanceScannerArtifact from '../artifacts/contracts/BalanceScanner.sol/BalanceScanner.json';\nimport ERC20InvalidMockArtifact from '../artifacts/contracts/mocks/ERC20InvalidMock.sol/ERC20InvalidMock.json';\nimport { BalanceScanner, ERC20InvalidMock } from './contracts';\nimport { getEtherBalances, getTokenBalances, getTokensBalance, getTokensBalances } from './eth-scan';\n\nconst { deployContract, deployMockContract, createFixtureLoader, provider } = waffle;\n\nconst loadFixture = createFixtureLoader(provider.getWallets(), provider);\n\n// eslint-disable-next-line jest/no-export\nexport const fixture = async (\n  signers: Signer[],\n  provider: MockProvider\n): Promise<{\n  contract: BalanceScanner;\n  signers: Signer[];\n  addresses: string[];\n  provider: MockProvider;\n  token: MockContract;\n  tokenA: MockContract;\n  tokenB: MockContract;\n  invalidToken: ERC20InvalidMock;\n}> => {\n  const signer = signers[0];\n  const contract = (await deployContract(signer, BalanceScannerArtifact)) as BalanceScanner;\n  const token = await deployMockContract(signer, ERC20Artifact.abi);\n\n  const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n  await tokenA.mock.balanceOf.returns('1000');\n\n  const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n  await tokenB.mock.balanceOf.returns('1');\n\n  const addresses = await Promise.all(signers.slice(1).map((s) => s.getAddress()));\n\n  const invalidToken = (await deployContract(signer, ERC20InvalidMockArtifact, [\n    addresses[0],\n    1000\n  ])) as ERC20InvalidMock;\n\n  return { contract, signers, addresses, provider, token, tokenA, tokenB, invalidToken };\n};\n\ndescribe('eth-scan', () => {\n  describe('getEtherBalances', () => {\n    it('returns the ether balances for multiple addresses as a BalanceMap', async () => {\n      const { contract, addresses } = await loadFixture(fixture);\n\n      const balances = await getEtherBalances(ethers.provider, addresses, { contractAddress: contract.address });\n      for (const address of addresses) {\n        const balance = BigInt((await ethers.provider.getBalance(address)).toHexString());\n        expect(balance).toBe(balances[address]);\n      }\n    });\n  });\n\n  describe('getTokenBalances', () => {\n    it('returns the token balances of one token, for multiple addresses', async () => {\n      const { contract, addresses, token } = await loadFixture(fixture);\n      await token.mock.balanceOf.returns('1000');\n\n      const balances = await getTokenBalances(ethers.provider, addresses, token.address, {\n        contractAddress: contract.address\n      });\n      for (const address of addresses) {\n        expect(balances[address]).toBe(1000n);\n      }\n    });\n\n    it('does not throw for invalid contracts', async () => {\n      const { contract, addresses, token } = await loadFixture(fixture);\n\n      await expect(() =>\n        getTokenBalances(ethers.provider, addresses, token.address, { contractAddress: contract.address })\n      ).not.toThrow();\n    });\n\n    it('retries failed contract calls', async () => {\n      const { contract, addresses, invalidToken } = await loadFixture(fixture);\n\n      const balances = await getTokenBalances(ethers.provider, [addresses[0], addresses[1]], invalidToken.address, {\n        contractAddress: contract.address\n      });\n\n      expect(balances[addresses[0]]).toBe(1000n);\n      expect(balances[addresses[1]]).toBe(0n);\n    });\n  });\n\n  describe('getTokensBalances', () => {\n    it('returns multiple token balances, for multiple addresses', async () => {\n      const { contract, signers, addresses, tokenA, tokenB } = await loadFixture(fixture);\n\n      const balances = await getTokensBalances(ethers.provider, addresses, [tokenA.address, tokenB.address], {\n        contractAddress: contract.address\n      });\n      for (const address of addresses) {\n        expect(Object.keys(balances[address])).toHaveLength(2);\n        expect(Object.keys(balances[address])[0]).toBe(tokenA.address);\n        expect(Object.keys(balances[address])[1]).toBe(tokenB.address);\n        expect(balances[address][tokenA.address]).toBe(1000n);\n        expect(balances[address][tokenB.address]).toBe(1n);\n      }\n    });\n\n    it('does not throw for invalid contracts', async () => {\n      const { contract, signers, addresses } = await loadFixture(fixture);\n      const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n\n      await expect(() =>\n        getTokensBalances(ethers.provider, addresses, [tokenA.address, tokenB.address], {\n          contractAddress: contract.address\n        })\n      ).not.toThrow();\n    });\n\n    it('retries failed contract calls', async () => {\n      const { contract, addresses, token, tokenA, invalidToken } = await loadFixture(fixture);\n\n      const balances = await getTokensBalances(\n        ethers.provider,\n        [addresses[0], addresses[1]],\n        [tokenA.address, invalidToken.address, token.address],\n        {\n          contractAddress: contract.address\n        }\n      );\n\n      expect(balances[addresses[0]][token.address]).toBe(0n);\n      expect(balances[addresses[0]][tokenA.address]).toBe(1000n);\n      expect(balances[addresses[0]][invalidToken.address]).toBe(1000n);\n      expect(balances[addresses[1]][token.address]).toBe(0n);\n      expect(balances[addresses[1]][tokenA.address]).toBe(1000n);\n      expect(balances[addresses[1]][invalidToken.address]).toBe(0n);\n    });\n  });\n\n  describe('getTokensBalance', () => {\n    it('returns multiple token balances for a single address', async () => {\n      const { contract, addresses, tokenA, tokenB } = await loadFixture(fixture);\n\n      const balances = await getTokensBalance(ethers.provider, addresses[0], [tokenA.address, tokenB.address], {\n        contractAddress: contract.address\n      });\n      expect(Object.keys(balances)).toHaveLength(2);\n      expect(Object.keys(balances)[0]).toBe(tokenA.address);\n      expect(Object.keys(balances)[1]).toBe(tokenB.address);\n      expect(balances[tokenA.address]).toBe(1000n);\n      expect(balances[tokenB.address]).toBe(1n);\n    });\n\n    it('does not throw for invalid contracts', async () => {\n      const { contract, signers, addresses } = await loadFixture(fixture);\n      const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n\n      await expect(() =>\n        getTokensBalance(ethers.provider, addresses[0], [tokenA.address, tokenB.address], {\n          contractAddress: contract.address\n        })\n      ).not.toThrow();\n    });\n\n    it('retries failed contract calls', async () => {\n      const { contract, addresses, token, tokenA, invalidToken } = await loadFixture(fixture);\n\n      const balances = await getTokensBalance(\n        ethers.provider,\n        addresses[0],\n        [token.address, tokenA.address, invalidToken.address],\n        {\n          contractAddress: contract.address\n        }\n      );\n\n      expect(balances[token.address]).toBe(0n);\n      expect(balances[tokenA.address]).toBe(1000n);\n      expect(balances[invalidToken.address]).toBe(1000n);\n    });\n  });\n});\n"],"file":"eth-scan.test.js"}